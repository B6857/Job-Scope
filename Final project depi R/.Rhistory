if (!is.null(df1) && !is.null(df4)) {
merged_df3 <- inner_join(df4, df1, by = c("ID_PL" = "ID"))
print("Merging completed successfully")
print(head(merged_df3))  # Display the first few rows of the merged DataFrame
} else {
print("Merging failed: One of the DataFrames is NULL")
}
print(names(all_sheets))
all_sheets=read.csv("C:/Users/Hp/Videos/.ipynb_checkpoints/FINALPROJECTR22.csv",header = TRUE)
# Load necessary libraries
library(dplyr)
library(tidyr)
# Create pivot table
pivot_table <- merged_df1 %>%
group_by(Title, BusinessMarket) %>%             # Group by Title and BusinessMarket
summarise(TotalCount = n(), .groups = 'drop') %>%  # Count occurrences
pivot_wider(names_from = BusinessMarket, values_from = TotalCount, values_fill = list(TotalCount = 0)) # Pivot wider with fill value
# Load necessary libraries
library(dplyr)
library(tidyr)
# Create pivot table
pivot_table <- all_sheets  %>%
group_by(Title, BusinessMarket) %>%             # Group by Title and BusinessMarket
summarise(TotalCount = n(), .groups = 'drop') %>%  # Count occurrences
pivot_wider(names_from = BusinessMarket, values_from = TotalCount, values_fill = list(TotalCount = 0)) # Pivot wider with fill value
all_sheets=read.csv("C:/Users/Hp/Videos/.ipynb_checkpoints/FINALPROJECTR22.csv",header = TRUE)
# Load necessary libraries
library(dplyr)
library(tidyr)
# Create pivot table
pivot_table <- all_sheets  %>%
group_by(Title, BusinessMarket) %>%             # Group by Title and BusinessMarket
summarise(TotalCount = n(), .groups = 'drop') %>%  # Count occurrences
pivot_wider(names_from = BusinessMarket, values_from = TotalCount, values_fill = list(TotalCount = 0)) # Pivot wider with fill value
all_sheets=read.csv("C:/Users/Hp/Videos/.ipynb_checkpoints/FINALPROJECTR22.csv",header = TRUE)
# Load necessary libraries
library(dplyr)
library(tidyr)
# Create pivot table
pivot_table <- all_sheets %>%
group_by(Title, BusinessMarket) %>%             # Group by Title and BusinessMarket
summarise(TotalCount = n(), .groups = 'drop') %>%  # Count occurrences
pivot_wider(names_from = BusinessMarket, values_from = TotalCount, values_fill = list(TotalCount = 0)) # Pivot wider with fill value
pivot_table = pd.pivot_table(
data,
values='TotalCompensationEgp',
index='WorkSetting',
aggfunc='mean'
)
# Load necessary libraries
library(dplyr)
# Create pivot table
pivot_table <- merged_df1 %>%
group_by(WorkSetting) %>%               # Group by WorkSetting
summarise(MeanTotalCompensation = mean(TotalCompensationEgp, na.rm = TRUE)) # Calculate mean
# Load necessary libraries
library(dplyr)
# Create pivot table
pivot_table <- data %>%
group_by(WorkSetting) %>%               # Group by WorkSetting
summarise(MeanTotalCompensation = mean(TotalCompensationEgp, na.rm = TRUE)) # Calculate mean
# Display the pivot table
print(pivot_table)
pivot_table <- merged_df1 %>%
group_by(WorkSetting) %>%
summarise(CountTotalCompensation = n())
pivot_table <- data %>%
group_by(WorkSetting) %>%
summarise(CountTotalCompensation = n())
print(pivot_table)
# Load necessary libraries
library(dplyr)
library(tidyr)
library(ggplot2)
# Create pivot table
pivot_table <- merged_df1 %>%
group_by(Timestamp) %>%              # Group by Timestamp
summarise(SumYoe = sum(Yoe, na.rm = TRUE), .groups = 'drop') %>%  # Sum of Yoe
# Filter the pivot table for the first 5 entries
filtered_pivot_table <- pivot_table %>%
slice(1:5)
# Load necessary libraries
library(dplyr)
library(tidyr)
library(ggplot2)
# Create pivot table
pivot_table <- data %>%
group_by(Timestamp) %>%              # Group by Timestamp
summarise(SumYoe = sum(Yoe, na.rm = TRUE), .groups = 'drop') %>%  # Sum of Yoe
# Filter the pivot table for the first 5 entries
filtered_pivot_table <- pivot_table %>%
slice(1:5)
# Plotting
ggplot(filtered_pivot_table, aes(x = Timestamp, y = SumYoe)) +
geom_line(color = 'blue') +                        # Add a line plot
labs(title = 'Sum of Yoe Over Time by Business Market',
x = 'Timestamp',
y = 'Sum of Yoe') +
theme_minimal() +                                  # Clean theme
theme(axis.text.x = element_text(angle = 45, hjust = 1)) + # Rotate x-axis labels
geom_point() +                                    # Add points to the line
geom_line(aes(group = 1))                          # Ensure it's treated as a single line
# Load necessary libraries
library(dplyr)
library(tidyr)
library(ggplot2)
# Create pivot table
pivot_table <- data %>%
group_by(Timestamp) %>%              # Group by Timestamp
summarise(SumYoe = sum(Yoe, na.rm = TRUE), .groups = 'drop') %>%  # Sum of Yoe
# Filter the pivot table for the first 5 entries
filtered_pivot_table <- pivot_table %>%
slice(1:5)
# Load necessary libraries
library(dplyr)
library(tidyr)
library(ggplot2)
# Create pivot table
pivot_table <- data %>%
group_by(Timestamp) %>%              # Group by Timestamp
summarise(SumYoe = sum(Yoe, na.rm = TRUE), .groups = 'drop') %>%  # Sum of Yoe
# Print the filtered pivot table
print(pivot_table)
pivot_table <- data %>%
group_by(BusinessSize, BusinessMarket) %>%       # Group by BusinessSize and BusinessMarket
summarise(CountTotalCompensation = n(), .groups = 'drop') %>%  # Count occurrences
pivot_wider(names_from = BusinessMarket, values_from = CountTotalCompensation, values_fill = list(CountTotalCompensation = 0)) # Pivot wider
# Print the pivot table
print(pivot_table)
pivot_table <- merged_df1 %>%
group_by(BusinessFocus, BusinessMarket) %>%
summarise(CountTotalCompensation = n(), .groups = 'drop') %>%
pivot_wider(names_from = BusinessMarket, values_from = CountTotalCompensation, values_fill = list(CountTotalCompensation = 0)) # Pivot wider
pivot_table <- data %>%
group_by(BusinessFocus, BusinessMarket) %>%
summarise(CountTotalCompensation = n(), .groups = 'drop') %>%
pivot_wider(names_from = BusinessMarket, values_from = CountTotalCompensation, values_fill = list(CountTotalCompensation = 0)) # Pivot wider
print(pivot_table)
pivot_table <- data %>%
group_by(BusinessFocus, BusinessMarket) %>%
summarise(CountTotalCompensation = n(), .groups = 'drop') %>%
pivot_wider(names_from = BusinessMarket, values_from = CountTotalCompensation, values_fill = list(CountTotalCompensation = 0)) # Pivot wider
print(pivot_table)
pivot_table <- merged_df1 %>%
group_by(BusinessFocus, BusinessLine) %>%
summarise(CountTotalCompensation = n(), .groups = 'drop') %>%
pivot_wider(names_from = BusinessLine, values_from = CountTotalCompensation, values_fill = list(CountTotalCompensation = 0)) # Pivot wider
pivot_table <- data %>%
group_by(BusinessFocus, BusinessLine) %>%
summarise(CountTotalCompensation = n(), .groups = 'drop') %>%
pivot_wider(names_from = BusinessLine, values_from = CountTotalCompensation, values_fill = list(CountTotalCompensation = 0)) # Pivot wider
print(pivot_table)
pivot_table <- data %>%
group_by(BusinessSize) %>%
summarise(CountTotalCompensation = n(), .groups = 'drop')
# Print the pivot table
print(pivot_table)
pivot_table <- data %>%
group_by(Yoe) %>%
summarise(MeanTotalCompensation = mean(TotalCompensationEgp, na.rm = TRUE), .groups = 'drop') # Calculate mean
pivot_table <- data %>%
group_by(Yoe) %>%
summarise(MeanTotalCompensation = mean(TotalCompensationEgp, na.rm = TRUE), .groups = 'drop')
print(pivot_table)
pivot_table <- merged_df1 %>%
group_by(WorkSetting) %>%
summarise(MeanTotalCompensation = mean(TotalCompensationEgp, na.rm = TRUE), .groups = 'drop')
pivot_table <- data %>%
group_by(WorkSetting) %>%
summarise(MeanTotalCompensation = mean(TotalCompensationEgp, na.rm = TRUE), .groups = 'drop')
print(pivot_table)
cor_matrix = cor(data %>% select(where(is.numeric())))
cor_matrix = cor(data %>% select(where(is.numeric))
print(cor_matrix)
cor_matrix = cor(data %>% select(where(is.numeric())))
cor_matrix = cor(data %>% select(where(is.numeric)))
print(cor_matrix)
cor_matrix = cor(data %>% select(where(is.numeric)))
print(cor_matrix)
heatmap(data, main="correlation matrix", col = heat.colors(10), scale ="none")
library(dplyr)
library(ggplot2)
library(reshape2)
cor_matrix = cor(data %>% select(where(is.numeric)))
print(cor_matrix)
heatmap(data, main="correlation matrix", col = heat.colors(10), scale ="none")
# Load necessary libraries
library(dplyr)
# Assuming 'data' is your dataframe
# Calculate the correlation matrix for numeric columns
cor_matrix <- cor(data %>% select(where(is.numeric)))
# Print the correlation matrix
print(cor_matrix)
# Create a heatmap of the correlation matrix
heatmap(cor_matrix,
main = "Correlation Matrix",
col = heat.colors(10),
scale = "none")
cor_matrix = cor(data %>% select(where(is.numeric)))
heatmap(data, main="correlation matrix", col = heat.colors(10), scale ="none")
cor_matrix = cor(data %>% select(where(is.numeric)))
heatmap(cor_matrix, main="correlation matrix", col = heat.colors(10), scale ="none")
print(cor_matrix)
cor_matrix = cor(data %>% select(where(is.numeric)))
heatmap(cor_matrix, main="correlation matrix", col = heat.colors(10), scale ="none")
print(cor_matrix)
#AVG Total Compensation by Level
pivot_table <- data %>%
group_by(Level) %>%
summarize(Mean_TotalCompensationEgp = mean(TotalCompensationEgp, na.rm = TRUE), .groups = 'drop') %>%
replace_na(list(Mean_TotalCompensationEgp = 0))  # Fill NA with 0 if needed
#AVG Total Compensation by Level
pivot_table <- data %>%
group_by(Level) %>%
summarize(Mean_TotalCompensationEgp = mean(TotalCompensationEgp, na.rm = TRUE), .groups = 'drop') %>%
replace_na(list(Mean_TotalCompensationEgp = 0))  # Fill NA with 0 if needed
#AVG Total Compensation by Level
pivot_table <- data %>%
group_by(Level) %>%
summarize(Mean_TotalCompensationEgp = mean(TotalCompensationEgp, na.rm = TRUE), .groups = 'drop') %>%
replace_na(list(Mean_TotalCompensationEgp = 0))  # Fill NA with 0 if needed
#AVG Total Compensation by Level
pivot_table <- data %>%
group_by(Level) %>%
summarize(Mean_TotalCompensationEgp = mean(TotalCompensationEgp, na.rm = TRUE), .groups = 'drop') %>%
replace_na(list(Mean_TotalCompensationEgp = 0))  # Fill NA with 0 if needed
#AVG Total Compensation by Level
pivot_table <- data %>%
group_by(Level) %>%
summarize(Mean_TotalCompensationEgp = mean(TotalCompensationEgp, na.rm = TRUE), .groups = 'drop') %>%
replace_na(list(Mean_TotalCompensationEgp = 0))  # Fill NA with 0 if needed
#AVG Total Compensation by Level
pivot_table <- data %>%
group_by(Level) %>%
summarize(Mean_TotalCompensationEgp = mean(TotalCompensationEgp, na.rm = TRUE), .groups = 'drop') %>%
replace_na(list(Mean_TotalCompensationEgp = 0))  # Fill NA with 0 if needed
#AVG Total Compensation by Level
pivot_table <- data %>%
group_by(Level) %>%
summarize(Mean_TotalCompensationEgp = mean(TotalCompensationEgp, na.rm = TRUE), .groups = 'drop') %>%
replace_na(list(Mean_TotalCompensationEgp = 0))  # Fill NA with 0 if needed
pivot_table <- data %>%
group_by(Level) %>%
summarize(Mean_TotalCompensationEgp = mean(TotalCompensationEgp, na.rm = TRUE), .groups = 'drop') %>%
replace_na(list(Mean_TotalCompensationEgp = 0))  # Fill NA with 0 if needed
pivot_table <- data %>%
group_by(Level) %>%
summarize(Mean_TotalCompensationEgp = mean(TotalCompensationEgp, na.rm = TRUE), .groups = 'drop') %>%
replace_na(list(Mean_TotalCompensationEgp = 0))  # Fill NA with 0 if needed
pivot_table <- data %>%
group_by(Level) %>%
summarize(Mean_TotalCompensationEgp = mean(TotalCompensationEgp, na.rm = TRUE), .groups = 'drop') %>%
replace_na(list(Mean_TotalCompensationEgp = 0))  # Fill NA with 0 if needed
pivot_table <- data %>%
group_by(Level) %>%
summarize(Mean_TotalCompensationEgp = mean(TotalCompensationEgp, na.rm = TRUE), .groups = 'drop') %>%
replace_na(list(Mean_TotalCompensationEgp = 0))  # Fill NA with 0 if needed
#Average Total Compensation by Work Setting
pivot_table <- data %>%
group_by(WorkSetting) %>%
summarise(MeanTotalCompensation = mean(TotalCompensationEgp, na.rm = TRUE), .groups = 'drop')
data=read.csv("C:/Users/Hp/Videos/.ipynb_checkpoints/R.FinalProject.csv",header = TRUE)
str(data)
library(dplyr)
library(tidyr)
library(ggplot2)
#Average Total Compensation by Work Setting
pivot_table <- data %>%
group_by(WorkSetting) %>%
summarise(MeanTotalCompensation = mean(TotalCompensationEgp, na.rm = TRUE), .groups = 'drop')
print(pivot_table)
#Average Total Compensation by Work Setting
pivot_table <- data %>%
group_by(WorkSetting) %>%
summarise(MeanTotalCompensation = mean(TotalCompensationEgp, na.rm = TRUE), .groups = 'drop')
print(pivot_table)
ggplot(pivot_table, aes(x = WorkSetting, y = MeanTotalCompensation, fill = WorkSetting)) +
geom_bar(stat = "identity") +  # Use identity stat to plot the mean values from the pivot table
geom_text(aes(label = round(MeanTotalCompensation, 1)), vjust = -0.5, size = 4, color = "black") +  # Add labels showing the mean value rounded to 1 decimal
theme_minimal() +
labs(title = "Average Total Compensation by Work Setting",
x = "Work Setting",
y = "Average Total Compensation (EGP)") +
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),  # Center and bold the title
axis.title.x = element_text(size = 14),  # Larger font for x-axis label
axis.title.y = element_text(size = 14),  # Larger font for y-axis label
axis.text.x = element_text(angle = 45, hjust = 1, size = 12),  # Rotate x-axis labels for readability
axis.text.y = element_text(size = 12),  # Customize y-axis labels
panel.grid.major = element_line(color = "grey80"),  # Subtle grid lines
panel.background = element_rect(fill = "white")  # Clean white background
)
pivot_table <- data %>%
group_by(BusinessSize) %>%
summarise(CountTotalCompensation = n(), .groups = 'drop')
print(pivot_table)
ggplot(pivot_table, aes(x = BusinessSize, y = CountTotalCompensation, fill = BusinessSize)) +
geom_bar(stat = "identity") +  # Use identity stat to plot the counts from the pivot table
geom_text(aes(label = CountTotalCompensation), vjust = -0.5, size = 4, color = "black") +  # Add labels showing the count on top of bars
theme_minimal() +
labs(title = "Count of Total Compensation by Business Size",
x = "Business Size",
y = "Count of Records") +
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),  # Center and bold the title
axis.title.x = element_text(size = 14),  # Larger font for x-axis label
axis.title.y = element_text(size = 14),  # Larger font for y-axis label
axis.text.x = element_text(angle = 45, hjust = 1, size = 12),  # Rotate x-axis labels for readability
axis.text.y = element_text(size = 12),  # Customize y-axis labels
panel.grid.major = element_line(color = "grey80"),  # Subtle grid lines
panel.background = element_rect(fill = "white")  # Clean white background
)
#'ID' by 'BusinessFocus' and 'BusinessLine'
pivot_table <- data %>%
group_by(BusinessFocus, BusinessLine) %>%
summarise(CountTotalCompensation = n(), .groups = 'drop') %>%
pivot_wider(names_from = BusinessLine, values_from = CountTotalCompensation, values_fill = list(CountTotalCompensation = 0)) # Pivot wider
print(pivot_table)
plot_data <- pivot_table %>%
pivot_longer(cols = -BusinessFocus, names_to = "BusinessLine", values_to = "CountTotalCompensation")  # Convert back to long format for ggplot
# Step 3: Draw the graph - stacked bar chart for Count of Total Compensation by BusinessFocus and BusinessLine
ggplot(plot_data, aes(x = BusinessFocus, y = CountTotalCompensation, fill = BusinessLine)) +
geom_bar(stat = "identity", position = "stack") +  # Stacked bar chart
geom_text(aes(label = CountTotalCompensation), position = position_stack(vjust = 0.5), size = 4, color = "black") +  # Add labels to bars
theme_minimal() +
labs(title = "Count of Total Compensation by Business Focus and Business Line",
x = "Business Focus",
y = "Count of Records") +
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),  # Center and bold the title
axis.title.x = element_text(size = 14),  # Larger font for x-axis label
axis.title.y = element_text(size = 14),  # Larger font for y-axis label
axis.text.x = element_text(angle = 45, hjust = 1, size = 12),  # Rotate x-axis labels for readability
axis.text.y = element_text(size = 12),  # Customize y-axis labels
panel.grid.major = element_line(color = "grey80"),  # Subtle grid lines
panel.background = element_rect(fill = "white")  # Clean white background
)
#count worksetting
pivot_table <- data %>%
group_by(WorkSetting) %>%
summarise(CountTotalCompensation = n())
print(pivot_table)
ggplot(pivot_table, aes(x = WorkSetting, y = CountTotalCompensation, fill = WorkSetting)) +
geom_bar(stat = "identity") +  # Use identity stat to plot the counts from the pivot table
geom_text(aes(label = CountTotalCompensation), vjust = -0.5, size = 4, color = "black") +  # Add labels showing the count on top of bars
theme_minimal() +
labs(title = "Count of Total Compensation by Work Setting",
x = "Work Setting",
y = "Count of Records") +
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),  # Center and bold the title
axis.title.x = element_text(size = 14),  # Larger font for x-axis label
axis.title.y = element_text(size = 14),  # Larger font for y-axis label
axis.text.x = element_text(angle = 45, hjust = 1, size = 12),  # Rotate x-axis labels for readability
axis.text.y = element_text(size = 12),  # Customize y-axis labels
panel.grid.major = element_line(color = "grey80"),  # Subtle grid lines
panel.background = element_rect(fill = "white")  # Clean white background
)
#Total Compensation by Business Size and Market
pivot_table <- data %>%
group_by(BusinessSize, BusinessMarket) %>%
summarise(CountTotalCompensation = n(), .groups = 'drop') %>%
pivot_wider(names_from = BusinessMarket, values_from = CountTotalCompensation, values_fill = list(CountTotalCompensation = 0)) # Pivot wider
print(pivot_table)
#Count of Total Compensation by Business Focus and Business Market
pivot_table <- data %>%
group_by(BusinessFocus, BusinessMarket) %>%
summarise(CountTotalCompensation = n(), .groups = 'drop') %>%
pivot_wider(names_from = BusinessMarket, values_from = CountTotalCompensation, values_fill = list(CountTotalCompensation = 0)) # Pivot wider
print(pivot_table)
#Count of Total Compensation by Business Focus and Business Market
pivot_table <- data %>%
group_by(BusinessFocus, BusinessMarket) %>%
summarise(CountTotalCompensation = n(), .groups = 'drop') %>%
pivot_wider(names_from = BusinessMarket, values_from = CountTotalCompensation, values_fill = list(CountTotalCompensation = 0)) # Pivot wider
print(pivot_table)
ggplot(plot_data, aes(x = BusinessFocus, y = CountTotalCompensation, fill = BusinessMarket)) +
geom_bar(stat = "identity", position = "stack") +  # Stacked bar chart
geom_text(aes(label = CountTotalCompensation), position = position_stack(vjust = 0.5), size = 4, color = "black") +  # Add labels to bars
theme_minimal() +
labs(title = "Count of Total Compensation by Business Focus and Business Market",
x = "Business Focus",
y = "Count of Records") +
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),  # Center and bold the title
axis.title.x = element_text(size = 14),  # Larger font for x-axis label
axis.title.y = element_text(size = 14),  # Larger font for y-axis label
axis.text.x = element_text(angle = 45, hjust = 1, size = 12),  # Rotate x-axis labels for readability
axis.text.y = element_text(size = 12),  # Customize y-axis labels
panel.grid.major = element_line(color = "grey80"),  # Subtle grid lines
panel.background = element_rect(fill = "white")  # Clean white background
)
#Count of Total Compensation by Business Focus and Business Market
pivot_table <- data %>%
group_by(BusinessFocus, BusinessMarket) %>%
summarise(CountTotalCompensation = n(), .groups = 'drop') %>%
pivot_wider(names_from = BusinessMarket, values_from = CountTotalCompensation, values_fill = list(CountTotalCompensation = 0)) # Pivot wider
print(pivot_table)
ggplot(plot_data, aes(x = BusinessFocus, y = CountTotalCompensation, fill = BusinessMarket)) +
geom_bar(stat = "identity", position = "stack") +  # Stacked bar chart
geom_text(aes(label = CountTotalCompensation), position = position_stack(vjust = 0.5), size = 4, color = "black") +  # Add labels to bars
theme_minimal() +
labs(title = "Count of Total Compensation by Business Focus and Business Market",
x = "Business Focus",
y = "Count of Records") +
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),  # Center and bold the title
axis.title.x = element_text(size = 14),  # Larger font for x-axis label
axis.title.y = element_text(size = 14),  # Larger font for y-axis label
axis.text.x = element_text(angle = 45, hjust = 1, size = 12),  # Rotate x-axis labels for readability
axis.text.y = element_text(size = 12),  # Customize y-axis labels
panel.grid.major = element_line(color = "grey80"),  # Subtle grid lines
panel.background = element_rect(fill = "white")  # Clean white background
)
pivot_table <- data %>%
group_by(BusinessSize) %>%
summarise(CountTotalCompensation = n(), .groups = 'drop')
print(pivot_table)
ggplot(pivot_table, aes(x = BusinessSize, y = CountTotalCompensation, fill = BusinessSize)) +
geom_bar(stat = "identity") +  # Use identity stat to plot the counts from the pivot table
geom_text(aes(label = CountTotalCompensation), vjust = -0.5, size = 4, color = "black") +  # Add labels showing the count on top of bars
theme_minimal() +
labs(title = "Count of Total Compensation by Business Size",
x = "Business Size",
y = "Count of Records") +
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),  # Center and bold the title
axis.title.x = element_text(size = 14),  # Larger font for x-axis label
axis.title.y = element_text(size = 14),  # Larger font for y-axis label
axis.text.x = element_text(angle = 45, hjust = 1, size = 12),  # Rotate x-axis labels for readability
axis.text.y = element_text(size = 12),  # Customize y-axis labels
panel.grid.major = element_line(color = "grey80"),  # Subtle grid lines
panel.background = element_rect(fill = "white")  # Clean white background
)
#Count of Total Compensation by Business Focus and Business Market
pivot_table <- data %>%
group_by(BusinessFocus, BusinessMarket) %>%
summarise(CountTotalCompensation = n(), .groups = 'drop') %>%
pivot_wider(names_from = BusinessMarket, values_from = CountTotalCompensation, values_fill = list(CountTotalCompensation = 0)) # Pivot wider
print(pivot_table)
ggplot(plot_data, aes(x = BusinessFocus, y = CountTotalCompensation, fill = BusinessMarket)) +
geom_bar(stat = "identity", position = "stack") +  # Stacked bar chart
geom_text(aes(label = CountTotalCompensation), position = position_stack(vjust = 0.5), size = 4, color = "black") +  # Add labels to bars
theme_minimal() +
labs(title = "Count of Total Compensation by Business Focus and Business Market",
x = "Business Focus",
y = "Count of Records") +
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),  # Center and bold the title
axis.title.x = element_text(size = 14),  # Larger font for x-axis label
axis.title.y = element_text(size = 14),  # Larger font for y-axis label
axis.text.x = element_text(angle = 45, hjust = 1, size = 12),  # Rotate x-axis labels for readability
axis.text.y = element_text(size = 12),  # Customize y-axis labels
panel.grid.major = element_line(color = "grey80"),  # Subtle grid lines
panel.background = element_rect(fill = "white")  # Clean white background
)
#Count of Total Compensation by Business Focus and Business Market
pivot_table <- data %>%
group_by(BusinessFocus, BusinessMarket) %>%
summarise(CountTotalCompensation = n(), .groups = 'drop') %>%
pivot_wider(names_from = BusinessMarket, values_from = CountTotalCompensation, values_fill = list(CountTotalCompensation = 0)) # Pivot wider
print(pivot_table)
#Count of Total Compensation by Business Focus and Business Market
pivot_table <- data %>%
group_by(BusinessFocus, BusinessMarket) %>%
summarise(CountTotalCompensation = n(), .groups = 'drop') %>%
pivot_wider(names_from = BusinessMarket, values_from = CountTotalCompensation, values_fill = list(CountTotalCompensation = 0)) # Pivot wider
print(pivot_table)
#Total Compensation by Business Size and Market
pivot_table <- data %>%
group_by(BusinessSize, BusinessMarket) %>%
summarise(CountTotalCompensation = n(), .groups = 'drop') %>%
pivot_wider(names_from = BusinessMarket, values_from = CountTotalCompensation, values_fill = list(CountTotalCompensation = 0)) # Pivot wider
print(pivot_table)
# Step 1: Create the pivot table for Count of Total Compensation by Business Focus and Business Market
pivot_table <- data %>%
group_by(BusinessFocus, BusinessMarket) %>%
summarise(CountTotalCompensation = n(), .groups = 'drop') %>%
pivot_wider(names_from = BusinessMarket, values_from = CountTotalCompensation, values_fill = list(CountTotalCompensation = 0))  # Pivot wider
# Print the pivot table
print(pivot_table)
# Step 2: Prepare data for plotting (long format)
plot_data <- pivot_table %>%
pivot_longer(cols = -BusinessFocus, names_to = "BusinessMarket", values_to = "CountTotalCompensation")  # Convert back to long format for ggplot
# Step 3: Draw the graph - stacked bar chart for Count of Total Compensation by Business Focus and Business Market
ggplot(plot_data, aes(x = BusinessFocus, y = CountTotalCompensation, fill = BusinessMarket)) +
geom_bar(stat = "identity", position = "stack") +  # Stacked bar chart
geom_text(aes(label = CountTotalCompensation), position = position_stack(vjust = 0.5), size = 4, color = "black") +  # Add labels to bars
theme_minimal() +
labs(title = "Count of Total Compensation by Business Focus and Business Market",
x = "Business Focus",
y = "Count of Records") +
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),  # Center and bold the title
axis.title.x = element_text(size = 14),  # Larger font for x-axis label
axis.title.y = element_text(size = 14),  # Larger font for y-axis label
axis.text.x = element_text(angle = 45, hjust = 1, size = 12),  # Rotate x-axis labels for readability
axis.text.y = element_text(size = 12),  # Customize y-axis labels
panel.grid.major = element_line(color = "grey80"),  # Subtle grid lines
panel.background = element_rect(fill = "white")  # Clean white background
)
cor_matrix = cor(data %>% select(where(is.numeric)))
cor_matrix = cor(data %>% select(where(is.numeric)))
cor_matrix = cor(data %>% select(where(is.numeric)))
data=read.csv("C:/Users/Hp/Videos/.ipynb_checkpoints/R.FinalProject.csv",header = TRUE)
str(data)
library(dplyr)
library(tidyr)
library(ggplot2)
cor_matrix = cor(data %>% select(where(is.numeric)))
heatmap(cor_matrix, main="correlation matrix", col = heat.colors(10), scale ="none")
print(cor_matrix)
